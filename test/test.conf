# A canonical Gestalt properties file

# -------------------------------------------
# demonstrate string type properties
# -------------------------------------------

# basic - note leading and trailing whitespace (including tabs)
# are removed from both keys and values.
# also note the trailing comment form.
prop one=prop one value                 # "prop one" => "prop one value"
 another property   =  value            # "another property" => "value"

# use quotes for leading or trailing spaces/tabs in values
log.info.level.id = "INFO "             # "log.info.level.id" => "INFO "
leading.whitespace = " test"            # "leading.whitespace" => " test"

# multiline values use the forward-slash line continuation char.
# note that ALL leading characters on a continued line are appended to value.
# and any trailing white space chars immediately before forward-slash are also appended.
long one = This sentence ends \
in 4 spaces\
    .                                   # "long one" => "This sentence ends in 4 spaces    ."

#zerovalue =                             # "zerovalue" => ""

# -------------------------------------------
# demonstrate []string type properties
# any key ending in "[]" 
# is treated as a []string type
# -------------------------------------------

# note that whitespace between `,` is removed.
an array [] = 1 , 2 , 3                 # "an array []" => ["1" "2" "3"]
another.array[] = "  1" , " 20", 300    # "an array []" => ["  1" " 20" "300"]

# note that for arrays (and maps) the leading and trailing
# white space for individual values on continued lines
# are trimmed (that is if a `,' precedes the `\`.
multi-line[] = a, b, c, \
               12\
 4567  ,\
               d, e         # "multi-line[]" => ["a" "b" "c" "12 4567" "d" "e"]

another.one[] = \
    a, \
    b, \                    # comment foo
    c                       # "another.one[]" => ["a" "b" "c"]

# you can define empty []string properties
#empty[] =                   # "empty[]" => []


# -------------------------------------------
# demonstrate map[string]string type properties
# any key ending in "[:]"
# is treated as a map[string]string type
# -------------------------------------------
a map[:] = a:1 , b:2, c : 3 , d:4         # "a map[:]" => map[a:1 c:3 b:2 d:4]

# maps can be defined in multi-lines per usual patterns and WS considerations
multline.map.example[:] = \
  a:1 , \
  b:2, c:3, \
  d:4                                    # "multline.map.example[:]" => map[a:1 c:3 b:2 d:4]

# maps can have zerovalue entries
zv.entry.map[:] =  foo:bar, zerovalue:    # "zv.entry.map[:]" => map[foo:bar zerovalue:]

# and finally, you can define empty map[string]string, as well.
#empty.map[:] =                            # "empty.map[:]" => map[]
